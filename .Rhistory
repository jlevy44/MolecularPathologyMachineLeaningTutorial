# sum(is.na(df))
df$log_spike<-log(df$Spike)
df$log_spike[df$log_spike==-Inf]<-NA
df.symptoms<-data.list$df.symptoms %>% mutate_all(replace.declined) %>% mutate(exclude.symptom=!is.na(severity))
df.symptoms$log_spike<-log(df.symptoms$Spike)
df.symptoms$log_spike[df.symptoms$log_spike==-Inf]<-NA
df.symptoms$age.cut<-cut(as.numeric(as.character(df$age)),c(0,35,59,Inf))
df$age.cut<-cut(as.numeric(as.character(df$age)),c(0,35,59,Inf))
df.age<-df %>% group_by(id) %>% mutate(age.final=age[1],age=age[1]/100,gender=gender[1])
df.age$age.cut<-cut(as.numeric(as.character(df.age$age.final)),c(0,35,59,Inf))
df$age<-df$age/100
df.symptoms$age<-df.symptoms$age/100
severity.cols<-data.list$severity.cols
df.symptoms[,1:16]<-df.symptoms[,1:16] %>% mutate_all(function(x) {replace.na(as.numeric(as.character(x)),0)})
res<-list()
n.divergent<-list()
control<-list(max_treedepth=15,adapt_delta=.9)
mcmc.matrices<-list()
mod<-brm(ordered(severity)~log_spike+Dose*vaccine*(age+gender)+NSAIDS.before+NSAIDS.immediate+NSAIDS.after+(1|id),data=df %>% filter(omit.symptoms,Dose%in%1:2),family=cumulative("probit"),seed=42,cores=4,refresh=0,iter=4000,control=control)
sm<-summary(mod)
res[["Overall.age.gender.3way"]]<-sm$fixed[!startsWith(rownames(sm$fixed),"Intercept"),1:4]
n.divergent[["Overall.age.gender.3way"]]<-sum(subset(nuts_params(mod), Parameter == "divergent__")$Value)
mcmc.matrices[["Overall.age.gender.3way"]]<-as.matrix(mod)
mod<-brm(ordered(severity)~log_spike+Dose*vaccine*(age.cut+gender)+NSAIDS.before+NSAIDS.immediate+NSAIDS.after+(1|id),data=df %>% filter(omit.symptoms,Dose%in%1:2),family=cumulative("probit"),seed=42,cores=4,refresh=0,iter=4000,control=control)
sm<-summary(mod)
res[["Overall.age.cut.gender.3way"]]<-sm$fixed[!startsWith(rownames(sm$fixed),"Intercept"),1:4]
n.divergent[["Overall.age.cut.gender.3way"]]<-sum(subset(nuts_params(mod), Parameter == "divergent__")$Value)
mcmc.matrices[["Overall.age.cut.gender.3way"]]<-as.matrix(mod)
saveRDS(list(res=res,
n.divergent=n.divergent,
mcmc.matrices=mcmc.matrices),"results_disco/save.analysis.11.rds")
res_<-readRDS("results_disco/save.analysis.11.rds")$res
res$Overall.age.gender.3way
res$Overall.age.cut.gender.3way
res$Overall.age.gender.3way
library(readxl)
library(plyr)
library(stringr)
library(xlsx)
library(sjPlot)
library(caret)
library(leaps)
library(MASS)
library(tidyverse)
library(bestglm)
library(plyr)
library(glmnet)
library(lme4)
library(brms)
library(ggpubr)
library(reshape)
library(comprehenr)
library(referenceIntervals)
library(tidybayes)
library(ordinal)
library(projpred)
library(bayesplot)
library(comprehenr)
library(epiR)
library(ordinal)
library(rlang)
library(ggridges)
library(lubridate)
library(patchwork)
replace.na<-function(x,v=0){
x[is.na(x)]<-v
return(x)
}
replace.declined<-function(x){
x[as.character(x)=="DECLINED"]<-NA
return(x)
}
if.else<-function(expr,return.true,return.false){if (expr) {return(return.true)} else {return(return.false)}}
data.list<-readRDS("curated.data.update.rds")
df<-data.list$df %>% mutate_all(replace.declined) %>% mutate(exclude.symptom=!is.na(severity))
#%>% filter(!is.na(severity))
# df[is.na(df %>% mutate_all(replace.declined)) & !is.na(df)]
# sum(is.na(df %>% mutate_all(replace.declined)))
# sum(is.na(df))
df$log_spike<-log(df$Spike)
df$log_spike[df$log_spike==-Inf]<-NA
df.symptoms<-data.list$df.symptoms %>% mutate_all(replace.declined) %>% mutate(exclude.symptom=!is.na(severity))
df.symptoms$log_spike<-log(df.symptoms$Spike)
df.symptoms$log_spike[df.symptoms$log_spike==-Inf]<-NA
df.symptoms$age.cut<-cut(as.numeric(as.character(df$age)),c(0,35,59,Inf))
df$age.cut<-cut(as.numeric(as.character(df$age)),c(0,35,59,Inf))
df.age<-df %>% group_by(id) %>% mutate(age.final=age[1],age=age[1]/100,gender=gender[1])
df.age$age.cut<-cut(as.numeric(as.character(df.age$age.final)),c(0,35,59,Inf))
df$age<-df$age/100
df.symptoms$age<-df.symptoms$age/100
severity.cols<-data.list$severity.cols
df.symptoms[,1:16]<-df.symptoms[,1:16] %>% mutate_all(function(x) {replace.na(as.numeric(as.character(x)),0)})
df.symptoms %>% filter(omit.symptoms,Dose!=3) %>% group_by(Dose,vaccine) %>% summarize(across(severity.cols,.fns = list(Mean = function(x){mean(as.numeric(x),na.rm=T)}, SD =function(x){sd(as.numeric(x),na.rm=T)})))
write.xlsx2(as.data.frame(df.lasted %>% filter(omit.symptoms,Dose!=3) %>% group_by(Dose,vaccine) %>% summarize(across(lasted.cols,.fns = list(Mean = function(x){mean(as.numeric(x),na.rm=T)}, SD =function(x){sd(as.numeric(x),na.rm=T)})))),file="symptom.summary.xlsx",sheet="avg.lasted",append=T)
# fix
write.xlsx2(as.data.frame(df.symptoms %>% filter(omit.symptoms,Dose!=3) %>% group_by(Dose,vaccine) %>% summarize(across(severity.cols,.fns = list(Mean = function(x){mean(as.numeric(x),na.rm=T)}, SD =function(x){sd(as.numeric(x),na.rm=T)})))),file="symptom.summary.xlsx",sheet="avg.severity",append=T)
write.xlsx2(as.data.frame(df.began %>% filter(omit.symptoms,Dose!=3) %>% group_by(Dose,vaccine) %>% summarize(across(1:16,.fns = list(Mean = function(x){mean(as.numeric(x),na.rm=T)}, SD =function(x){sd(as.numeric(x),na.rm=T)})))),file="symptom.summary.xlsx",sheet="avg.start.time",append=T)
system("open symptom.summary.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(caret)
library(pROC)
library(keras)
library(purrr)
library(tidyverse)
data<-read.csv("data/leukemia.csv",header = F)
getwd()
setwd("/Users/joshualevy/Documents/GitHub/MolecularPathologyMachineLeaningTutorial")
data<-read.csv("data/leukemia.csv",header = F)
getwd()
data<-read.csv("data/leukemia.csv",header = F)
data
data<-read.csv("data/leukemia.csv",header = F)
set.seed(42)
data$Y<-as.factor(sapply(data$V1,function(x){str_detect(x,"ALL")}))
data<-data[,-1]
data<-data[,c(sample(1:(ncol(data)-1),size=30),ncol(data))]
set.seed(42)
train.index <- createDataPartition(data$Y, p = .7, list = FALSE)
train.data<-data[train.index,]
test.data<-data[-train.index,]
cv.control <- trainControl(
method = "cv",
number = 3)
cv.grid <-  expand.grid(size = seq(1, 10, 3),
decay = c(0, 0.2, 0.4))
nnet <- train(Y~., data = train.data,
method = "nnet",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control
)
library(stringr)
library(caret)
library(pROC)
library(keras)
library(purrr)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(caret)
library(pROC)
library(keras)
library(purrr)
library(tidyverse)
set.seed(42)
data$Y<-as.factor(sapply(data$V1,function(x){str_detect(x,"ALL")}))
data<-read.csv("../data/leukemia.csv",header = F)
set.seed(42)
data$Y<-as.factor(sapply(data$V1,function(x){str_detect(x,"ALL")}))
data<-data[,-1]
data<-data[,c(sample(1:(ncol(data)-1),size=30),ncol(data))]
set.seed(42)
train.index <- createDataPartition(data$Y, p = .7, list = FALSE)
train.data<-data[train.index,]
test.data<-data[-train.index,]
cv.control <- trainControl(
method = "cv",
number = 3)
cv.grid <-  expand.grid(mtry = seq(10,110,20),
min.node.size = c(5,20,30))
nnet <- train(Y~., data = train.data,
method = "ranger",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control
)
cv.grid <-  expand.grid(mtry = seq(10,110,20),
min.node.size = c(5,20,30),
splitrule = c("none","impurity","impurity_corrected"))
nnet <- train(Y~., data = train.data,
method = "ranger",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control
)
rf <- train(Y~., data = train.data,
method = "ranger",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control
)
cv.grid <-  expand.grid(mtry = seq(10,110,20),
min.node.size = c(5,20,30),
splitrule = c("impurity"))
rf <- train(Y~., data = train.data,
method = "ranger",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control
)
data$Y
data$Y<-as.factor(as.numeric(sapply(data$V1,function(x){str_detect(x,"ALL")})))
set.seed(42)
data$Y<-as.factor(as.numeric(sapply(data$V1,function(x){str_detect(x,"ALL")})))
data<-read.csv("../data/leukemia.csv",header = F)
set.seed(42)
data$Y<-as.factor(as.numeric(sapply(data$V1,function(x){str_detect(x,"ALL")})))
data<-data[,-1]
data<-data[,c(sample(1:(ncol(data)-1),size=30),ncol(data))]
set.seed(42)
train.index <- createDataPartition(data$Y, p = .7, list = FALSE)
train.data<-data[train.index,]
test.data<-data[-train.index,]
cv.control <- trainControl(
method = "cv",
number = 3)
cv.grid <-  expand.grid(mtry = seq(10,110,20),
min.node.size = c(5,20,30),
splitrule = c("impurity"))
rf <- train(Y~., data = train.data,
method = "ranger",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control
)
table(data$Y)
rf <- train(Y~., data = train.data,
method = "ranger",
linout = F,
metric="kappa",
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control
)
cv.grid <-  expand.grid(mtry = seq(10,110,20),
min.node.size = c(5,10,15),
splitrule = c("impurity"))
rf <- train(Y~., data = train.data,
method = "ranger",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control
)
rf <- train(Y~., data = train.data,
method = "ranger",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F
)
set.seed(42)
cv.grid <-  expand.grid(mtry = seq(10,110,20))
rf <- train(Y~., data = train.data,
method = "cforest",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F
)
cv.grid <-createGrid("cforest", len, data)
cv.grid <-caret::createGrid("cforest", len, data)
cv.grid <-caret:::createGrid("cforest", len, data)
install.packages("caret")
install.packages("caret")
install.packages("caret")
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(caret)
library(pROC)
library(purrr)
library(tidyverse)
data<-read.csv("../data/leukemia.csv",header = F)
set.seed(42)
data$Y<-as.factor(as.numeric(sapply(data$V1,function(x){str_detect(x,"ALL")})))
data<-data[,-1]
data<-data[,c(sample(1:(ncol(data)-1),size=30),ncol(data))]
set.seed(42)
train.index <- createDataPartition(data$Y, p = .7, list = FALSE)
train.data<-data[train.index,]
test.data<-data[-train.index,]
cv.control <- trainControl(
method = "cv",
number = 3)
cv.grid <- createGrid("cforest", len, data)
cv.grid <- caret:::createGrid("cforest", len, data)
getModelInfo("cforest", FALSE)[[1]]$grid
cv.grid <- getModelInfo("cforest", FALSE)[[1]]$grid
table(data$Y)
set.seed(42)
rf <- train(Y~., data = train.data,
method = "cforest",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F
)
cv.grid <-  expand.grid(.mtry = seq(10,110,20))
set.seed(42)
rf <- train(Y~., data = train.data,
method = "cforest",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F
)
expand.grid(.mtry = seq(10,110,20))
rf <- train(Y~., data = train.data,
method = "cforest",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F
)
data
sum(is.na(data))
train.data
test.data<-data[-train.index,]
test.data
sum(is.na(train.data))
cv.control <- trainControl(
method = "cv",
number = 3)
cv.grid <-  expand.grid(.mtry = seq(10,110,20))
table(data$Y)
set.seed(42)
rf <- train(Y~., data = train.data,
method = "cforest",
linout = F,
trace=T,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F
)
cvIndex <- createFolds(factor(train.data$Y), 3, returnTrain = T)
cv.control <- trainControl(
index=cvIndex,
method = "cv",
number = 3)
cv.grid <-  expand.grid(.mtry = seq(10,110,20))
set.seed(42)
rf <- train(Y~., data = train.data,
method = "cforest",
linout = F,
trace=T,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F
)
rf <- train(Y~., data = train.data,
method = "cforest",
linout = F,
trace=T,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F,
ntree=1000
)
rf <- train(Y~., data = train.data,
method = "rf",
linout = F,
trace=F,
#tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F,
ntree=1000
)
cv.grid <-  expand.grid(ntree = seq(10,110,20))
set.seed(42)
rf <- train(Y~., data = train.data,
method = "rf",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F,
ntree=1000
)
cv.grid <-  expand.grid(ntree = seq(10,110,20),
.mtry= c(5,10,dqrt(ncol(data)-1)))
cv.grid <-  expand.grid(ntree = seq(10,110,20),
.mtry= c(5,10,sqrt(ncol(data)-1)))
set.seed(42)
rf <- train(Y~., data = train.data,
method = "rf",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F
)
cv.grid <-  expand.grid(ntree = seq(10,110,20),
mtry= c(5,10,sqrt(ncol(data)-1)))
set.seed(42)
rf <- train(Y~., data = train.data,
method = "rf",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F
)
cv.grid
cv.grid <-  expand.grid(ntree = seq(10,110,20),
mtry= as.integer(c(5,10,sqrt(ncol(data)-1))))
set.seed(42)
rf <- train(Y~., data = train.data,
method = "rf",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F
)
cv.grid <-  expand.grid(.mtry= as.integer(c(5,10,sqrt(ncol(data)-1))))
table(data$Y)
set.seed(42)
rf <- train(Y~., data = train.data,
method = "rf",
linout = F,
trace=F,
tuneGrid=cv.grid,
trainControl=cv.control,
allowParallel=F,
ntree=1000
)
confusionMatrix(data = predict(rf,test.data), reference = test.data$Y)
rocobj <- plot.roc(test.data$Y, predict(nnet,test.data,type="prob")[,2],
main = "ROC Curve Test Set",
percent=TRUE,
ci = TRUE,
print.auc = TRUE)
rocobj <- plot.roc(test.data$Y, predict(rf,test.data,type="prob")[,2],
main = "ROC Curve Test Set",
percent=TRUE,
ci = TRUE,
print.auc = TRUE)
ciobj <- ci.se(rocobj,
specificities = seq(0, 100, 5))
plot(ciobj, type = "shape", col = "#1c61b6AA")
rocobj <- plot.roc(test.data$Y, predict(rf,test.data,type="prob")[,2],
main = "ROC Curve Test Set",
percent=TRUE,
ci = TRUE,
print.auc = TRUE)
ciobj <- ci.se(rocobj,
specificities = seq(0, 100, 5))
plot(ciobj, type = "shape", col = "#1c61b6AA")
plot(ci(rocobj, of = "thresholds", thresholds = "best"))
set.seed(42)
pca<-prcomp(t(data[,-ncol(data)]))
t.data.pca<-as.data.frame(pca$rotation[,1:2])
colnames(t.data.pca)<-c("x","y")
t.data.pca$ALL<-data$Y
ggplot(t.data.pca,aes(x=x,y=y,col=ALL)) +
geom_point()
library(cluster)
library(mclust)
install.packages("EMCluster")
library(EMCluster)
em.EM(t.data.pca[,1:@])
em.EM(t.data.pca[,1:2])
em.EM(t.data.pca[,1:2],nclass=2)
set.seed(42)
gaussian.mixture<-em.EM(t.data.pca[,1:2],nclass=2)
plotem(gaussian.mixture,t.data.pca[,1:2])
kmeans(t.data.pca[,1:2])
library(cluster)
library(Hmisc)
?kmeans
library(MASS)
gaussian.mixture<-em.EM(t.data.pca[,1:2],nclass=2, min.n = 20)
plotem(gaussian.mixture,t.data.pca[,1:2])
gaussian.mixture<-em.EM(t.data.pca[,1:2],nclass=2, min.n = 20)
gaussian.mixture<-em.EM(t.data.pca[,1:2],nclass=2, min.n = 1)
plotem(gaussian.mixture,t.data.pca[,1:2])
gaussian.mixture<-em.EM(t.data.pca[,1:2],nclass=3, min.n = 20)
plotem(gaussian.mixture,t.data.pca[,1:2])
gaussian.mixture<-em.EM(t.data.pca[,1:2],nclass=2, min.n = 10)
plotem(gaussian.mixture,t.data.pca[,1:2])
kmeans(t.data.pca[,1:2],2)
cl.object<-kmeans(t.data.pca[,1:2],2)
cl.object$cluster
cl.object<-kmeans(t.data.pca[,1:2],2)
t.data.pca$cl<-cl.object$cluster
ggplot(t.data.pca,aes(x=x,y=y,col=cl)) +
geom_point()
set.seed(42)
pca<-prcomp(t(data[,-ncol(data)]))
t.data.pca<-as.data.frame(pca$rotation[,1:2])
colnames(t.data.pca)<-c("x","y")
t.data.pca$ALL<-data$Y
ggplot(t.data.pca,aes(x=x,y=y,col=ALL)) +
geom_point()
t.data.pca$cl<-as.character(cl.object$cluster)
ggplot(t.data.pca,aes(x=x,y=y,col=cl)) +
geom_point()
ret.proj <- project.on.2d(t.data.pca[,1:2], gaussian.mixture)
t.data.pca$cl2<-as.character(assign.class(t.data.pca[,1:2], gaussian.mixture))
as.character(assign.class(t.data.pca[,1:2], gaussian.mixture))
assign.class(t.data.pca[,1:2], gaussian.mixture)
assign.class(t.data.pca[,1:2], gaussian.mixture)
cl2<-assign.class(t.data.pca[,1:2], gaussian.mixture)
cl2$class
t.data.pca$cl2<-as.character(assign.class(t.data.pca[,1:2], gaussian.mixture)$class)
set.seed(42)
gaussian.mixture<-em.EM(t.data.pca[,1:2],nclass=2, min.n = 10)
t.data.pca$cl2<-as.character(assign.class(t.data.pca[,1:2], gaussian.mixture)$class)
ggplot(t.data.pca,aes(x=x,y=y,col=cl2)) +
geom_point()
